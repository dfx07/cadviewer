<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:CadViewer.UIControls"
                    xmlns:cvt="clr-namespace:CadViewer.Converters"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib">

    <cvt:CommonHeightToCornerRadiusConverter x:Key="HeightToCornerRadiusConverter" />
    <cvt:CommonBoolToVisibilityConverter x:Key="BoolToVisibilityConverter" />
    <cvt:CommonNumberToStringWithFormatConverter x:Key="NumberToStringWithFormatConverter" />

    <Style TargetType="{x:Type local:CExpander}" BasedOn="{StaticResource {x:Type Expander}}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:CExpander}">
                    <DockPanel>
                        <Border x:Name="PART_ExpanderHeader" DockPanel.Dock="Top" Height="{TemplateBinding HeaderHeight}" Padding="2" 
                                BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True" CornerRadius="{DynamicResource CompUI_Expander_CornerRadius}">
                            <Border.BorderBrush>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                    <LinearGradientBrush.GradientStops>
                                        <GradientStop Color="{DynamicResource CompUI_Cmm_BorderColor}" Offset="0.0" />
                                        <GradientStop Color="{DynamicResource CompUI_Cmm_BorderColor}" Offset="0.94" />
                                        <GradientStop Color="{DynamicResource CompUI_Cmm_BorderColor}" Offset="1.0" />
                                    </LinearGradientBrush.GradientStops>
                                </LinearGradientBrush>
                            </Border.BorderBrush>
                            <Border.Background>
                                <SolidColorBrush Color="{DynamicResource CompUI_Expander_HeaderBackgroundColor}"></SolidColorBrush>
                            </Border.Background>
                            <Border.Triggers>
                                <EventTrigger RoutedEvent="MouseEnter">
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <ColorAnimation Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" 
                                                            To="{DynamicResource CompUI_Expander_HeaderBackgroundOverColor}" Duration="0:0:0.1" />
                                            <ColorAnimation Storyboard.TargetProperty="(BorderBrush).(GradientBrush.GradientStops)[2].(GradientStop.Color)" 
                                                            To="{DynamicResource CompUI_Cmm_BorderEndColor}" Duration="0:0:0.1" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger>
                                <EventTrigger RoutedEvent="MouseLeave">
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <ColorAnimation Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" 
                                                            To="{DynamicResource CompUI_Expander_HeaderBackgroundColor}" Duration="0:0:0.1" />
                                            <ColorAnimation Storyboard.TargetProperty="(BorderBrush).(GradientBrush.GradientStops)[2].(GradientStop.Color)" 
                                                            To="{DynamicResource CompUI_Cmm_BorderColor}" Duration="0:0:0.1" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger>
                                <EventTrigger RoutedEvent="MouseDown">
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <ColorAnimation Storyboard.TargetProperty="(BorderBrush).(GradientBrush.GradientStops)[2].(GradientStop.Color)" 
                                                            To="{DynamicResource CompUI_Cmm_BorderColor}" Duration="0:0:0.0" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger>
                                <EventTrigger RoutedEvent="MouseUp">
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <ColorAnimation Storyboard.TargetProperty="(BorderBrush).(GradientBrush.GradientStops)[2].(GradientStop.Color)"
                                                            To="{DynamicResource CompUI_Cmm_BorderEndColor}" Duration="0:0:0.0" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger>
                            </Border.Triggers>
                            <DockPanel>
                                <ToggleButton x:Name="HeaderSite" ContentTemplate="{TemplateBinding HeaderTemplate}" DockPanel.Dock="Right" 
                                              ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" FontStretch="{TemplateBinding FontStretch}"
                                              Foreground="{TemplateBinding Foreground}"
                                              FontStyle="{TemplateBinding FontStyle}" FontFamily="{TemplateBinding FontFamily}" FontWeight="{TemplateBinding FontWeight}" 
                                              FontSize="{TemplateBinding FontSize}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                              IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" 
                                              Padding="{TemplateBinding Padding}" Style="{StaticResource xToggleButtonExpanderDownStyle}" 
                                              VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}">
                                </ToggleButton>
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition x:Name="PART_ExpanderHeaderColumn1" Width="Auto" />
                                        <ColumnDefinition x:Name="PART_ExpanderHeaderColumn2" Width="*" />
                                    </Grid.ColumnDefinitions>
                                    <Image x:Name="xExpanderHeaderImage" Grid.Row="0" Grid.Column="0" Margin="4,2,4,2" Source="{TemplateBinding ImageSource}" VerticalAlignment="Center" HorizontalAlignment="Center" SnapsToDevicePixels="True" UseLayoutRounding="True">
                                        <Image.Width>
                                            <MultiBinding Converter="{StaticResource SetDoubleDefaultConverter}">
                                                <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="ImageWidth" />
                                                <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="HeaderHeight" />
                                            </MultiBinding>
                                        </Image.Width>
                                    </Image>
                                    <ContentPresenter x:Name="PART_ExpanderHeaderContent" Grid.Row="0" Grid.Column="1" Margin="4,2,4,2" ContentSource="Header" RecognizesAccessKey="True" />
                                </Grid>
                            </DockPanel>
                        </Border>
                        <local:CSlideDownContainer x:Name="PART_ExpanderContent" DockPanel.Dock="Bottom" BorderThickness="1,0,1,1" SnapsToDevicePixels="True"
                                                   CornerRadius="{DynamicResource CompUI_Expander_ContentCornerRadius}" Padding="4">
                            <local:CSlideDownContainer.BorderBrush>
                                <SolidColorBrush Color="{DynamicResource CompUI_Cmm_BorderColor}"></SolidColorBrush>
                            </local:CSlideDownContainer.BorderBrush>
                            <local:CSlideDownContainer.Background>
                                <SolidColorBrush Color="{DynamicResource CompUI_Cmm_BackgroundColor}"></SolidColorBrush>
                            </local:CSlideDownContainer.Background>
                            <ContentPresenter Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </local:CSlideDownContainer>
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsExpanded" Value="True" />
                                <Condition Property="ExpandDirection" Value="Up" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_ExpanderHeader" Property="CornerRadius" Value="{DynamicResource CompUI_Expander_ContentCornerRadius}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsExpanded" Value="True" />
                                <Condition Property="ExpandDirection" Value="Down" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_ExpanderHeader" Property="CornerRadius" Value="{DynamicResource CompUI_Expander_HeaderCornerRadius}" />
                        </MultiTrigger>
                        <Trigger Property="IsExpanded" Value="False">
                            <Setter TargetName="PART_ExpanderContent" Property="Visibility" Value="Hidden" />
                        </Trigger>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter TargetName="PART_ExpanderContent" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <DataTrigger Binding="{Binding ImagePlacement, RelativeSource={RelativeSource Self}}" Value="Left">
                            <Setter TargetName="xExpanderHeaderImage" Property="Grid.Column" Value="0" />
                            <Setter TargetName="PART_ExpanderHeaderContent" Property="Grid.Column" Value="1" />
                            <Setter TargetName="PART_ExpanderHeaderColumn1" Property="Width" Value="Auto" />
                            <Setter TargetName="PART_ExpanderHeaderColumn2" Property="Width" Value="*" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding ImagePlacement, RelativeSource={RelativeSource Self}}" Value="Right">
                            <Setter TargetName="xExpanderHeaderImage" Property="Grid.Column" Value="1" />
                            <Setter TargetName="PART_ExpanderHeaderContent" Property="Grid.Column" Value="0" />
                            <Setter TargetName="PART_ExpanderHeaderColumn1" Property="Width" Value="*" />
                            <Setter TargetName="PART_ExpanderHeaderColumn2" Property="Width" Value="Auto" />
                        </DataTrigger>
                        <Trigger Property="ExpandDirection" Value="Up">
                            <Setter TargetName="PART_ExpanderHeader" Property="DockPanel.Dock" Value="Bottom" />
                            <Setter TargetName="PART_ExpanderContent" Property="DockPanel.Dock" Value="Top" />
                            <Setter TargetName="PART_ExpanderContent" Property="BorderThickness" Value="1,1,1,0" />
                            <Setter TargetName="PART_ExpanderContent" Property="CornerRadius" Value="{DynamicResource CompUI_Expander_HeaderCornerRadius}" />
                            <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource xToggleButtonExpanderUpStyle}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>